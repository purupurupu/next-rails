name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: todo_app_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.5'
          bundler-cache: true
          working-directory: backend

      - name: Setup test database
        env:
          RAILS_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/todo_app_test
          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
        run: |
          cd backend
          bundle exec rails db:create
          bundle exec rails db:schema:load
        
      - name: Run tests with coverage
        env:
          RAILS_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/todo_app_test
          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
          COVERAGE: true
          CI: true
        run: |
          cd backend
          bundle exec rspec --format progress --format RspecJunitFormatter --out rspec-results.xml

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: rspec-results
          path: backend/rspec-results.xml

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: backend/coverage/

      - name: Check coverage threshold
        env:
          MIN_COVERAGE: 90
        run: |
          cd backend
          coverage=$(ruby -rjson -e "puts JSON.parse(File.read('coverage/.last_run.json'))['result']['line']")
          echo "Current coverage: $coverage%"
          
          if (( $(echo "$coverage < $MIN_COVERAGE" | bc -l) )); then
            echo "::error::Coverage ($coverage%) is below minimum threshold ($MIN_COVERAGE%)"
            exit 1
          else
            echo "::notice::Coverage ($coverage%) meets minimum threshold ($MIN_COVERAGE%)"
          fi

      - name: Report Coverage
        if: github.event_name == 'pull_request' && always()
        run: |
          cd backend
          if [ -f "coverage/.last_run.json" ]; then
            coverage=$(ruby -rjson -e "puts JSON.parse(File.read('coverage/.last_run.json'))['result']['line']")
            echo "### Test Coverage Report 📊" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Coverage:** ${coverage}%" >> $GITHUB_STEP_SUMMARY
            echo "**Minimum Required:** 90%" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            if (( $(echo "$coverage >= 90" | bc -l) )); then
              echo "✅ Coverage threshold met!" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ Coverage is below the minimum threshold." >> $GITHUB_STEP_SUMMARY
            fi
          fi

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: |
          cd frontend
          pnpm install

      - name: Run linter
        run: |
          cd frontend
          pnpm run lint

      - name: Run type check
        run: |
          cd frontend
          pnpm run typecheck:full

      - name: Build frontend
        run: |
          cd frontend
          pnpm run build

  all-tests:
    name: All Tests Passed
    needs: [backend-tests, frontend-tests]
    runs-on: ubuntu-latest
    steps:
      - name: All tests completed
        run: echo "All tests passed successfully!"